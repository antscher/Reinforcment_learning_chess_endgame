import json
import random
import chess
import chess.engine
from states.QTable import QTable
from states.state_KRvsk import State

# Load the trained Q-table
try:
    with open("results/test_trained_qtable.json") as f:
        qtable_data = json.load(f)
except json.JSONDecodeError as e:
    print(f"JSON error: {e}")
    qtable_data = {}

qtable = QTable(qtable_data)
engine_path = "stockfish/stockfish-windows-x86-64-avx2.exe"

num_games = 20
results = {"1-0": 0, "0-1": 0, "1/2-1/2": 0}

for i in range(num_games):
    initial_fen = State.random_kr_vs_k_fen()
    print(f"Initial FEN: {initial_fen}")
    board = chess.Board(initial_fen)
    engine = chess.engine.SimpleEngine.popen_uci(engine_path)
    while not board.is_game_over():
        if board.turn == chess.WHITE:
            fen = board.fen().split(' ')[0]
            legal_moves = [move.uci() for move in board.legal_moves]
            if fen in qtable.q_table:
                best_move = qtable.argmax(fen)
                board.push_san(best_move) # type: ignore
            else:
                move = legal_moves[0]
                board.push_san(move)
        else:
            # Black (Stockfish) move
            
            result = engine.play(board, chess.engine.Limit(time=0.05))
            if result.move is not None:
                print(f"Stockfish move: {result.move.uci()}")
                board.push(result.move)
            else:
                print("Stockfish has no legal move (None returned)")
            """
            result = random.choice([move.uci() for move in board.legal_moves])  # Random move for black
            board.push_san(result)
            #print(f"Random black move: {result}")
            """
    engine.quit()
    game_result = board.result()
    results[game_result] = results.get(game_result, 0) + 1
    print(f"Game {i+1}: {game_result}")

print("\nSummary after 200 games:")
print(f"White (QTable) wins: {results['1-0']}")
print(f"Black (Stockfish) wins: {results['0-1']}")
print(f"Draws: {results['1/2-1/2']}")
print(f"Win rate: {results['1-0']/num_games*100:.2f}%")
print(f"Draw rate: {results['1/2-1/2']/num_games*100:.2f}%")
print(f"Loss rate: {results['0-1']/num_games*100:.2f}%")
